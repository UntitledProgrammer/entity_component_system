// Environment Simulation.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <stdlib.h>
#include <iostream>
#include <SFML/Graphics.hpp>
#include "Constraints.h"
#include "application/systems/rendering.hpp"
#include "ecs/include/core.h"
#include "profiler/src/Timer.h"
#include "ecs/storage/subset.hpp"
#include "application/systems/phyics.hpp"
#include "application/world.h"
#include "application/systems/test_system.hpp"




int main()
{
	np_app::Timer timer;
	std::srand(timer.elapsed_milliseconds());
	np_ecs::World world = np_ecs::World(20, 20);
	np_app::RenderSystem* render_system = (np_app::RenderSystem*) world.register_system<np_app::RenderSystem>(np_ecs::get_architype<Sprite, np_app::Rigidbody>(), true);
	np_app::Physics* physics_system = (np_app::Physics*) world.register_system<np_app::Physics>(np_ecs::get_architype<Sprite>(), true);

	for (int i = 0; i < 10; i++)
	{
		np_ecs::entity_t entity = world.generate_entity();

		Sprite sprite = render_system->get_sprite("asteroid.png");
		sprite.sprite.setScale(sf::Vector2f(0.25f, 0.25f));
		sprite.sprite.setPosition(sf::Vector2f(std::rand() % sim::width + 0, std::rand() % sim::height + 0));
		world.add_component<Sprite>(entity, sprite);
		world.add_component<np_app::Rigidbody>(entity, np_app::Rigidbody(2000.00f, &sprite));
		world.add_component<np_app::Message>(entity, np_app::Message("Hello World" + i));
	}

	//Window loop:
	while (true)
	{
		world.update();
	}

}