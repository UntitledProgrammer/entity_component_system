// Environment Simulation.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <stdlib.h>
#include <iostream>
#include <SFML/Graphics.hpp>
#include "Constraints.h"
#include "application/systems/effects.hpp"
#include "ecs/include/core.h"
#include "profiler/src/Timer.h"
#include "ecs/storage/subset.hpp"
#include "application/systems/phyics.hpp"
#include "application/world.h"
#include "application/systems/test_system.hpp"



int main()
{
	np_app::Timer timer;
	np_ecs::World world = np_ecs::World(802, 802);

	np_ecs::get_bit_flag<int>();

	np_app::RenderSystem* render_system = (np_app::RenderSystem*)world.register_system<np_app::RenderSystem>(np_ecs::get_architype<Sprite>(), false);


	for (int i = 0; i < 40; i++)
	{
		std::srand(timer.elapsed_milliseconds());
		np_ecs::entity_t entity = world.generate_entity();
		Sprite sprite = render_system->get_sprite("asteroid.png");
		sprite.sprite.setScale(sf::Vector2f(0.25f, 0.25f));
		sprite.sprite.setPosition(sf::Vector2f(std::rand() % sim::width + 0, 0.0f));
		world.schedule_add_component(entity, new Sprite(sprite), np_ecs::get_bit_flag<Sprite>());
		if(std::rand()  % 4 + 0 > 3) world.schedule_add_component(entity, new Ant(std::rand() % sim::width + 0, std::rand() % sim::height + 0, 0, -1), np_ecs::get_bit_flag<Ant>());
		else if(std::rand() % 4 + 0 >= 1) world.schedule_add_component(entity, new Ant(std::rand() % sim::width + 0, std::rand() % sim::height + 0, -1, 0), np_ecs::get_bit_flag<Ant>());
		else world.schedule_add_component(entity, new Ant(std::rand() % sim::width + 0, std::rand() % sim::height + 0, 0, 1), np_ecs::get_bit_flag<Ant>());
	}

	AntSystem* ant_system = (AntSystem*)world.register_system<AntSystem>(np_ecs::get_architype<Ant, Sprite>(), true);

	//Window loop:
	while (true)
	{
		world.update();
	}

}